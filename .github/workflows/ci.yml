# Continuous Delivery Workflow
# This workflow triggers when a new Git tag (e.g., v1.0.0) is pushed.

name: cd

on:
  push:
    tags:
      - 'v**'  # Match version tags like v1.0.0, v1.1.2, etc.

jobs:
  aws:
    name: AWS Deployment
    runs-on: ubuntu-latest
    steps:

      # Step 1: Check out code from GitHub
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for optimized builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Configure AWS credentials using GitHub Secrets
      - name: Configure AWS Credentials using Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1  # Change if your AWS region is different

      # Step 4: Login to Amazon ECR (Elastic Container Registry)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build and Push Docker image to Amazon ECR
      - name: Build and push to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}, ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest

      # Step 6: Update ECS Task Definition with the new image
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        with:
          task-definition: fragments-definition.json
          container-name: fragments
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}
          environment-variables: |
            LOG_LEVEL=debug
            NODE_ENV=production
            AWS_REGION=us-east-1
            AWS_COGNITO_POOL_ID=${{ secrets.AWS_COGNITO_POOL_ID }}
            AWS_COGNITO_CLIENT_ID=${{ secrets.AWS_COGNITO_CLIENT_ID }}
            API_URL=${{ secrets.API_URL }}
            AWS_S3_ENDPOINT_URL=${{ secrets.AWS_S3_ENDPOINT_URL }}

      # Step 7: Deploy updated Task Definition to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          cluster: fragments-cluster
          service: fragments-service
          wait-for-service-stability: true
